#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Latproc Tools User Guide
\end_layout

\begin_layout Section
Preface
\end_layout

\begin_layout Standard
Please note that this is a very early draft.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This guide describes the tools that come with the Latproc project (https://githu
b.com/latproc); the programs include:
\end_layout

\begin_layout Description
beckhoffd a program to provide a zmq interface to an EtherCAT installation.
 
\emph on
Not currently working
\end_layout

\begin_layout Description
cw a daemon that runs clockwork programs
\end_layout

\begin_layout Description
device_connector a program to interface between iod and external programs
\end_layout

\begin_layout Description
iod a daemon that talks to EtherCAT to interact with io hardware using the
 clockwork language
\end_layout

\begin_layout Description
iosh a shell to interact with iod
\end_layout

\begin_layout Description
modbusd an interface between iod and modbus
\end_layout

\begin_layout Description
persistd a basic persistence daemon to record state changes from iod 
\end_layout

\begin_layout Description
zmq_monitor a program to monitor zmq messages published by iod 
\end_layout

\begin_layout Standard
For the remainder of this guide, the above programs are split between those
 that run clockwork (`Language') and those that provide interfaces (`Tools').
\end_layout

\begin_layout Subsection
Acknowledgements
\end_layout

\begin_layout Standard
The language and tools making up Latproc are built using a variety of open
 source tools and platforms, including;
\end_layout

\begin_layout Itemize
anet tcp wrappers (part of redis - http://redis.io)
\end_layout

\begin_layout Itemize
boost (http://boost.org/) - various c++ bits and pieces
\end_layout

\begin_layout Itemize
IgH EtherCAT(tm) Master for Linux (http://www.etherlab.org/en/ethercat/index.php)
\end_layout

\begin_layout Itemize
libmodbus (http://libmodbus.org/) - for communication with modbus/tcp terminals
\end_layout

\begin_layout Itemize
zeromq (http://www.zeromq.org/) - for inter-program messaging
\end_layout

\begin_layout Itemize
mqtt (http://mqtt.org)
\end_layout

\begin_layout Itemize
cJSON
\end_layout

\begin_layout Standard
We developed the software using open source development tools: GNU gcc,
 bison and flex and used Linux and MacOSX workstations.
\end_layout

\begin_layout Section
Language
\end_layout

\begin_layout Standard
The clockwork language is finite state machine based, designed to monitor
 various statemachines and to generate events when certain conditions arise
 in a machine interfacing and control environment.
 The program provides the user with a way to build a model of a machine
 and to simulate or change its behaviour.
 Clockwork is event-based and inherently parallel and can be used to model
 many systems that can be represented using finite state machines.
\end_layout

\begin_layout Standard
There are two language drivers at present, 
\emph on
cw
\emph default
 and 
\emph on
iod
\emph default
.
 The difference between them is that iod includes facilities to talk to
 I/O hardware via the IgH EtherCAT(tm) Master for Linux and cw does not.
 We will discuss the use of cw first and discuss the extensions that iod
 provides afterwards.
 Note that both iod and cw are able to communicate with devices over MQTT
 with some limitations as the MQTT implementation is not complete.
 Through these hardware interfaces, clockwork can be used to design and
 build complex control systems that interface to the physical world.
\end_layout

\begin_layout Subsection
Getting started
\end_layout

\begin_layout Standard
The file: README, that comes with the latproc distribution explains how
 to build the cw program.
 The essense of the process is:
\end_layout

\begin_layout Enumerate
pull the latproc project from git
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
git clone git://github.com/latproc/clockwork.git
\end_layout

\end_deeper
\begin_layout Enumerate
change to the latproc directory and build the interpreter
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
cd clockwork/iod
\end_layout

\begin_layout LyX-Code
make debug 
\end_layout

\end_deeper
\begin_layout Standard
The `make' process should produce a build/Debug directory withcommandline
 programs for cw, iosh, modbusd, device_connector and persistd that can
 be copied to a convenient location (eg /usr/local/bin).
 You can also use make install from within the build/Debug directory to
 copy the files to your clockwork/iod directory that you ran the original
 make from.
\end_layout

\begin_layout Subsubsection
Hello World
\end_layout

\begin_layout Standard
Clockwork accepts a list of files on the commandline; it reads all the state
 machine descriptions and connections within those files and then starts
 a virtual environment that runs those machines.
 For the sake of brevity, clockwork refers to finite state machine definitions
 simply as 'machines'.
 A machine requires a 
\emph on
definition
\emph default
, that describes the states the machine has and how the machine moves between
 those states and at least one 
\emph on
instantiation
\emph default
, that causes a machine to be started in the virtual environment.
\end_layout

\begin_layout Standard
When an instantiated machine is enabled, it enters its INIT state, causing
 an event handler to be executed.
 Each time a machine changes state the associated event handler is executed.
\end_layout

\begin_layout Standard
Here is a program that will display a message on the terminal:
\end_layout

\begin_layout LyX-Code
Hello MACHINE { 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
ENTER INIT { 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
LOG "Hello World"; 
\end_layout

\begin_layout LyX-Code
SHUTDOWN
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout LyX-Code
hello Hello;
\end_layout

\begin_layout Standard
The above program can be executed by saving it into a file (eg hello.cw)
 and running cw:
\end_layout

\begin_layout LyX-Code
cw hello.cw
\end_layout

\begin_layout Standard
The output should be displayed as:
\end_layout

\begin_layout LyX-Code
------- hello: Hello World -------
\end_layout

\begin_layout Standard
Note that case is important in Clockwork and that the clockwork language
 uses uppercase letters for its reserved words and builtin machine definitions.
 In Clockwork, instructions can only be executed inside event handlers,
 so to log a simple message first requires that we define a class of state
 machine and then an event handler within that state machine.
 
\end_layout

\begin_layout Standard
The example above defines a class of state machine called 'Hello' and an
 event handler for entry to INIT; our LOG statment is executed when an instance
 of the 'Hello' class of machine is started.
\end_layout

\begin_layout Standard
Note that after the LOG statement, our program has a SHUTDOWN statement;
 Clockwork is intended to be used to monitor system states or provide ongoing
 control functions so it normally does not exit; the SHUTDOWN statement
 tells the driver to shutdown the virtual environment, stopping all machines.
\end_layout

\begin_layout Subsubsection
Light Sensor
\end_layout

\begin_layout Standard
Here is an example of how Clockwork can be used to define a monitor that
 turns a light on or off once there is no activity in a room.
 We start with a sensor and a switch, with the idea that when the sensor
 comes on there is activity so we turn the light on.
 When the sensor goes off, we turn off the light.
 For the time being, we use the builtin statemachine called 'FLAG' to simulate
 the sensor and the switch.
 A FLAG has two states, 
\emph on
on
\emph default
 and 
\emph on
off
\emph default
.
\end_layout

\begin_layout Standard
We can generally define things in any order, so lets define our light controller
 first.
\end_layout

\begin_layout LyX-Code
LightController MACHINE sensor, light_switch {
\end_layout

\begin_layout LyX-Code
    active WHEN sensor IS on;
\end_layout

\begin_layout LyX-Code
    inactive DEFAULT;
\end_layout

\begin_layout LyX-Code
    ENTER active { SET light_switch TO on }
\end_layout

\begin_layout LyX-Code
    ENTER inactive { SET light_switch TO off } 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
The definition simply says that when the sensor is on, the light controller
 is active and the light should be turned on.
 Otherwise, the light controller is inactive and the light should be turned
 off.
 The ENTER methods are executed each time the MACHINE enters a given state.
 Notice that we do not initialise the light, when the program starts, the
 LightController will determine what to do from the rules we have supplied.
\end_layout

\begin_layout Standard
The LightController needs two parameters; a sensor and a light switch.
 For the time being, we instantiate our Flags and our controller as follows:
\end_layout

\begin_layout LyX-Code
sensor FLAG; 
\end_layout

\begin_layout LyX-Code
switch FLAG;
\end_layout

\begin_layout LyX-Code
controller LightController sensor, switch;
\end_layout

\begin_layout Standard
Note that these entries can be given in any order.
\end_layout

\begin_layout Subsection
Communicating with Clockwork servers
\end_layout

\begin_layout Standard
When a Clockwork program is being run, you can interact with it using a
 command interface or via a web page.
 The simplest method got get started with is the command interface, the
 web interface needs some extra configuration for the web server.
 Refer to section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:iosh"

\end_inset

 for further information about iosh.
\end_layout

\begin_layout Standard
The latproc source includes some PHP code that provides a simple web view
 of the state machines in the executing program.
 The program requires PHP version 5.3 and has been tested with apache and
 with minihttpd.
 [further explanation of the setup to be done].
\end_layout

\begin_layout Subsection
Soure code conventions and file structure
\end_layout

\begin_layout Standard
When writing programs for Clockwork, program source can be split between
 any number of files within a user-nominated directory structure.
 Files and directories are provided to cw on the commandline and the program
 scans all files in the directories to build a consistent set of definitions
 from the fragments found within the files.
 There is no requirement to list the files in any particular order but it
 is an error if a definition is used but not provided or if a definition
 is provided more than once.
\end_layout

\begin_layout Itemize
Program text is freeform, where line breaks, tabs and spaces are all treated
 equally except where they occur within quoted strings or in the case of
 line breaks where they mark the end of a single-line comment.
\end_layout

\begin_layout Itemize
Comments can be started with `#' and continue to the end-of-line or can
 be started by `/*' and ended by `*/'.
\end_layout

\begin_layout Itemize
Statements must be separated by semicolon (`;') but the semicolon before
 the closing brace (`}') that ends a group of statements may still be given.
\end_layout

\begin_layout Section
Tools
\end_layout

\begin_layout Subsection
iosh
\begin_inset CommandInset label
LatexCommand label
name "subsec:iosh"

\end_inset


\end_layout

\begin_layout Standard
Clockwork and iod both provide support for a simple shell, called iosh via
 the Ømq (zeromq) network library.
 To connect to the clockwork server, simply run iosh:
\end_layout

\begin_layout LyX-Code
$ iosh
\end_layout

\begin_layout LyX-Code
Connecting to tcp://127.0.0.1:5555
\end_layout

\begin_layout LyX-Code
Enter HELP; for help.
 Note that ';' is required at the end of each command   use exit; or ctrl-D
 to exit this program 
\end_layout

\begin_layout LyX-Code
> 
\end_layout

\begin_layout Standard
at the prompt, enter any supported command, as follows:
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

machine
\begin_inset space ~
\end_inset

on|off start/stops debug messages for the device; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset

.
 Example: DEBUG blinker on
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

debug_group
\begin_inset space ~
\end_inset

on|off starts/stops debug messages for all the devices in the given group;
 see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset

.
 Example DEBUG DEBUG_SCHEDULER on
\end_layout

\begin_layout Description
DISABLE
\begin_inset space ~
\end_inset

machine disables a machine; in the case of a POINT, it is turned off, other
 machines simply sit in the current state and do not process events or monitor
 states
\end_layout

\begin_layout Description
EC
\begin_inset space ~
\end_inset

command send a command to the ethercat tool (iod only)
\end_layout

\begin_layout Description
ENABLE
\begin_inset space ~
\end_inset

machine_name enable a machine; set the machine state to its initial state
 and have it begin processing events and monitoring states
\end_layout

\begin_layout Description
GET
\begin_inset space ~
\end_inset

machine_name display the state of the names machine
\end_layout

\begin_layout Description
LIST show a list of all machines
\end_layout

\begin_layout Description
LIST
\begin_inset space ~
\end_inset

[group_name] show a list of machines and their current state and properties
 in JSON format, optionally limit the list to the named group.
\end_layout

\begin_layout Description
MASTER display the ethercat master state (iod only)
\end_layout

\begin_layout Description
MODBUS
\begin_inset space ~
\end_inset

export write the modbus export configuration to the export file (the file
 name is configured on the commandline when cw or iod is started
\end_layout

\begin_layout Description
MODBUS
\begin_inset space ~
\end_inset

group
\begin_inset space ~
\end_inset

address
\begin_inset space ~
\end_inset

new_value simulate a modbus event to change the given element to the new
 value
\end_layout

\begin_layout Description
PROPERTY
\begin_inset space ~
\end_inset

machine_name
\begin_inset space ~
\end_inset

property_name
\begin_inset space ~
\end_inset

new_value set the value of the given property
\end_layout

\begin_layout Description
QUIT exit the program
\end_layout

\begin_layout Description
RESUME
\begin_inset space ~
\end_inset

machine_name enable a machine by reentering the state it was in when it
 was disabled.
\end_layout

\begin_layout Description
SEND
\begin_inset space ~
\end_inset

command send the event, given in target_machine_name '.' event_name form.
\end_layout

\begin_layout Description
SET
\begin_inset space ~
\end_inset

machine_name
\begin_inset space ~
\end_inset

TO
\begin_inset space ~
\end_inset

state_name attempt to set the named machine to the given state
\end_layout

\begin_layout Description
SLAVES display information about the known EtherCAT slaves
\end_layout

\begin_layout Description
TOGGLE
\begin_inset space ~
\end_inset

machine_name changes from the on state to off or vice-versa, only usable
 on machines with both an on and off state.
\end_layout

\begin_layout Subsubsection
Debug facilities
\end_layout

\begin_layout Standard
Basic debug facilities are provided to:
\end_layout

\begin_layout Itemize
enable extra output from the driver onto its terminal output.
 The debug groups are listed in table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset


\end_layout

\begin_layout Itemize
trace handler execution by turning trace mode on and monitoring a device
 via sampler
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="8cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_ACTIONS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to execution of steps in handlers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_AUTOSTATES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to evaluation of stable states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_CHANNELS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to communication channels between programs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_DEPENDANCIES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_DISPATCHER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to sending internal messages from handlers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_ETHERCAT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows EtherCAT related messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_INITIALISATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages about the initialisation of internal structures
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MACHINELOOKUPS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MESSAGING
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to sending of zmq messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MODBUS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to modbus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PARSER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to the parsing of clockwork scripts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PREDICATES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to evaluation of predicates in IF statements and
 stable states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PROPERTIES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to properties
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_SCHEDULER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows scheduler messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_STATECHANGES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages aboute state changes and transition tables
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Debug-groups"

\end_inset

Debug groups
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tracing
\end_layout

\begin_layout Standard
To enable tracing from iosh, first enable tracing globally and set the TRACEABLE
 property on the machine to be traced to TRUE or FALSE to enable/disable
 tracing on that machine.
 For example:
\end_layout

\begin_layout LyX-Code
TRACING ON 
\end_layout

\begin_layout LyX-Code
PROPERTY blinker TRACEABLE TRUE;
\end_layout

\begin_layout Subsection
persistd
\end_layout

\begin_layout Standard
persistd monitors a connection clockwork driver for machines that publicly
 report their state changes using zmq.
\end_layout

\begin_layout Standard
Some machine properties are used within clockwork and are not propagated
 to the persistence daemon, however other properties are used in tools external
 to clockwork and by default these properties are ignored by persistd.
 
\end_layout

\begin_layout Standard
In future a method will be available to nominate the set of keys that are
 to be ignored.
\end_layout

\begin_layout Subsection
beckhoffd
\end_layout

\begin_layout Subsection
modbusd
\end_layout

\begin_layout Subsection
device_connector
\end_layout

\begin_layout Section
Other Features
\end_layout

\begin_layout Subsection
Connecting other devices
\end_layout

\begin_layout Standard
Currently external devices can be connected to cw and iod by use of the
 EXTERNAL machine class.
 To define a connection:
\end_layout

\begin_layout Itemize
instantiate an EXTERNAL machine
\end_layout

\begin_layout Itemize
set parameters on that machine:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
HOST a string with the name or ip address of the host.
 The sepecial host name `*' indicates that the program should use a publisher/su
bscriber messaging model and not expect any replies.
\end_layout

\begin_layout Description
PORT a number with the port to connect to on the remote machine
\end_layout

\end_deeper
\begin_layout Standard
When a message is sent to the machine defined in this way, a connection
 is made via ØMQ and the message is sent.
 The connection is help open, ready for more messages.
\end_layout

\begin_layout Subsection
Persistence
\end_layout

\begin_layout Standard
Machine state and properties are normally initialised on program startup
 but a machine can also be marked as persistent to cause them to be reinitialise
d to their last known state with the same property values.
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Patterns
\end_layout

\begin_layout Standard
The following demonstrates how to detect a message and extract data from
 it.
 In particular, this machine looks for a four character message beginning
 with `c' and ending with `l'.
 When a match is detected, it will set a variable called `single' to the
 first character of the message and the variable all to the first $n$ alphabetic
 letters.
\end_layout

\begin_layout Standard
Note that another machine might send the message using:
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
pattern_test.message := 'curl'
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
PatternTest MACHINE {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
	OPTION message "";
\end_layout

\begin_layout LyX-Code
	found WHEN message MATCHES `c..l`;
\end_layout

\begin_layout LyX-Code
	not_found DEFAULT; 
\end_layout

\begin_layout LyX-Code
	ENTER found {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
		single := COPY `[A-Za-z]` FROM message; 		
\end_layout

\begin_layout LyX-Code
		all := COPY ALL `[A-Za-z]` FROM message;
\end_layout

\end_deeper
\begin_layout LyX-Code
	}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
pattern_test PatternTest;
\end_layout

\begin_layout Subsection
Using lists
\end_layout

\begin_layout Standard
Lists can be treated like sets or lists.
 Here are some examples.
\end_layout

\begin_layout Subsubsection
Expressions involving lists
\end_layout

\begin_layout Itemize
ANY IN set_name ARE | IS state_name # returns true if any of the items in
 the set are in the state given
\end_layout

\begin_layout Itemize
ANY PROPERTY property IN set_name ARE | IS value
\end_layout

\begin_layout Itemize
ALL IN set_name ARE | IS state_name/value
\end_layout

\begin_layout Itemize
ALL PROPERTY property_name IN set_name ARE | IS state_name/value
\end_layout

\begin_layout Itemize
COUNT state_name FROM set_name # counts the number of items in the set that
 are in the named state
\end_layout

\begin_layout Itemize
COUNT WHERE expression FROM set_name # counts the number of items in the
 set where the expression returns true 
\end_layout

\begin_layout Itemize
BITSET FROM set_name state_name # returns a bitset that represents the an
 on/off value for the given state name.
 Further examples use variable values..
\end_layout

\begin_layout Itemize
COPY n FROM set_name # picks n elements at random from a set
\end_layout

\begin_layout Itemize
TAKE n FROM set_name # takes n elements at random from a set
\end_layout

\begin_layout Subsubsection
Statements involving lists
\end_layout

\begin_layout Itemize
BITSET FROM set_name WITH STATE state_name # returns a bitset that represents
 the an on/off value for the given state name.
 Further examples use variable values..
\end_layout

\begin_layout Subsection
Latched input
\end_layout

\begin_layout Standard
Here is an example of how to latch an input; once the input comes on the
 latched input comes on and stays on until it is reset
\end_layout

\begin_layout LyX-Code
GenericLatch MACHINE input {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
on STATE;
\end_layout

\begin_layout LyX-Code
off INITIAL;
\end_layout

\begin_layout LyX-Code
RECEIVE input.on_enter { SET SELF TO on }
\end_layout

\begin_layout LyX-Code
TRANSITION on TO off ON reset;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Calling functions
\end_layout

\begin_layout Standard
Machines can receive messages from other machines.
 To send a message `start` to a machine called `other', the statement:
\end_layout

\begin_layout LyX-Code
SEND start TO other;
\end_layout

\begin_layout Standard
would be used.
 Sometimes, we refer to these messages as `commands' and the two terms can
 be used interchangeably.
 The following example demonstrates the `CALL' syntax to send the message.
 Apart from the name difference, a CALL statement will block until the command
 handled at the receiving machine.
\end_layout

\begin_layout LyX-Code
CommandTest MACHINE other {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
	a DEFAULT;
\end_layout

\begin_layout LyX-Code
	ENTER a { 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
		LOG "a"; 
\end_layout

\begin_layout LyX-Code
		CALL x ON SELF;
\end_layout

\begin_layout LyX-Code
		CALL y ON other; 
\end_layout

\end_deeper
\begin_layout LyX-Code
	}
\end_layout

\begin_layout LyX-Code
	COMMAND x { LOG "x on CommandTest called" }
\end_layout

\end_deeper
\begin_layout LyX-Code
	}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
OtherTest MACHINE {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
	COMMAND y { LOG "y on OtherTest called" }
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
o OtherTest;
\end_layout

\begin_layout LyX-Code
test CommandTest o;
\end_layout

\begin_layout Subsection
LED Light chaser
\end_layout

\begin_layout Standard
Here is a program that produces a light chaser pattern on a list of lights.
\end_layout

\begin_layout LyX-Code
Cell MACHINE left, right {     
\end_layout

\begin_layout LyX-Code
on WHEN right IS off 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
AND (SELF IS on 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
OR 
\end_layout

\end_deeper
\begin_layout LyX-Code
left IS on AND SELF IS off AND left.TIMER >= 1000);   
\end_layout

\end_deeper
\begin_layout LyX-Code
off DEFAULT;
\end_layout

\begin_layout LyX-Code
starting DURING start { SET SELF TO on }     
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
led01 Cell led06, led02; 
\end_layout

\begin_layout LyX-Code
led02 Cell led01, led03; 
\end_layout

\begin_layout LyX-Code
led03 Cell led02, led04; 
\end_layout

\begin_layout LyX-Code
led04 Cell led03, led05; 
\end_layout

\begin_layout LyX-Code
led05 Cell led04, led06; 
\end_layout

\begin_layout LyX-Code
led06 Cell led05, led01;
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/light_chaser.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
LED Light Chaser demonstration displayed in the web page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Dining philosopers
\end_layout

\begin_layout Standard
The following simulates several philosophers dining at a circular table.
 There are seven philosophers and only seven chopsticks so chopsticks must
 be shared as two chopsticks are required to eat.
 The program uses resource locking to guarantee that chopsticks are not
 being used by different philosplers simultaneously.
\end_layout

\begin_layout LyX-Code
Chopstick MACHINE {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
	OPTION tab Test;
\end_layout

\begin_layout LyX-Code
	OPTION owner "noone";
\end_layout

\begin_layout LyX-Code
	free STATE;
\end_layout

\begin_layout LyX-Code
	busy STATE;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
Philosopher MACHINE left, right {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
	OPTION tab Test;
\end_layout

\begin_layout LyX-Code
    OPTION eat_time 20;
\end_layout

\begin_layout LyX-Code
    OPTION timer 20;
\end_layout

\begin_layout LyX-Code
    full FLAG;
\end_layout

\begin_layout LyX-Code
    okToStart FLAG;
\end_layout

\begin_layout LyX-Code
    okToStop FLAG;
\end_layout

\begin_layout LyX-Code
    finished WHEN SELF IS finishing || SELF IS finished && TIMER < timer;
\end_layout

\begin_layout LyX-Code
	finishing WHEN left.owner == SELF.NAME && right.owner == SELF.NAME  
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
		&& TIMER >= eat_time; 
\end_layout

\end_deeper
\begin_layout LyX-Code
	eating WHEN left.owner == SELF.NAME && right.owner == SELF.NAME,
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
        TAG full WHEN TIMER > 10;
\end_layout

\end_deeper
\begin_layout LyX-Code
	starting WHEN left.owner == "noone" && right.owner == "noone";
\end_layout

\begin_layout LyX-Code
	waiting DEFAULT;
\end_layout

\begin_layout LyX-Code
    ENTER INIT {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
        eat_time := (NOW % 10) * 10;
\end_layout

\begin_layout LyX-Code
        SET okToStart TO on;
\end_layout

\begin_layout LyX-Code
        SET okToStop TO on;
\end_layout

\end_deeper
\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
	ENTER starting {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
		LOCK left;
\end_layout

\begin_layout LyX-Code
		IF (left.owner == "noone") {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
            LOG "got left";
\end_layout

\begin_layout LyX-Code
			left.owner := SELF.NAME;
\end_layout

\begin_layout LyX-Code
			LOCK right;
\end_layout

\begin_layout LyX-Code
			IF (right.owner == "noone") {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
				right.owner := SELF.NAME;
\end_layout

\begin_layout LyX-Code
                LOG "got right";
\end_layout

\end_deeper
\begin_layout LyX-Code
			}
\end_layout

\begin_layout LyX-Code
			ELSE {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
				UNLOCK left;
\end_layout

\begin_layout LyX-Code
				UNLOCK right;
\end_layout

\end_deeper
\begin_layout LyX-Code
			}
\end_layout

\end_deeper
\begin_layout LyX-Code
		}
\end_layout

\begin_layout LyX-Code
		ELSE {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
			UNLOCK left;
\end_layout

\end_deeper
\begin_layout LyX-Code
		}
\end_layout

\end_deeper
\begin_layout LyX-Code
	}
\end_layout

\begin_layout LyX-Code
	ENTER finished {
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
        LOG "finished"; 
\end_layout

\begin_layout LyX-Code
		left.owner := "noone";
\end_layout

\begin_layout LyX-Code
		right.owner := "noone";
\end_layout

\begin_layout LyX-Code
		UNLOCK right;
\end_layout

\begin_layout LyX-Code
		UNLOCK left;
\end_layout

\begin_layout LyX-Code
		timer := 10 * (TIMER + 1);
\end_layout

\end_deeper
\begin_layout LyX-Code
	}
\end_layout

\begin_layout LyX-Code
    TRANSITION INIT TO starting REQUIRES okToStart IS on;
\end_layout

\begin_layout LyX-Code
    TRANSITION eating TO finished REQUIRES okToStop IS on;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
c01 Chopstick; c02 Chopstick; c03 Chopstick; 
\end_layout

\begin_layout LyX-Code
c04 Chopstick; c05 Chopstick; c06 Chopstick; c07 Chopstick;
\end_layout

\begin_layout LyX-Code
phil1 Philosopher c01, c02; 
\end_layout

\begin_layout LyX-Code
phil2 Philosopher c02, c03; 
\end_layout

\begin_layout LyX-Code
phil3 Philosopher c03, c04; 
\end_layout

\begin_layout LyX-Code
phil4 Philosopher c04, c05; 
\end_layout

\begin_layout LyX-Code
phil5 Philosopher c05, c06; 
\end_layout

\begin_layout LyX-Code
phil6 Philosopher c06, c07; 
\end_layout

\begin_layout LyX-Code
phil7 Philosopher c07, c01;
\end_layout

\end_body
\end_document
