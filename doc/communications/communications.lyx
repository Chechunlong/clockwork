#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Communications
\end_layout

\begin_layout Abstract
This document describes the future communications framework for Clockwork.
 A Clockwork driver program provides a runtime environment to execute several
 machines in parallel.
 Each driver may communicate with others via message passing and publisher/subsc
riber models.
 
\end_layout

\begin_layout Standard
This document explores new communication interfaces for clockwork
\end_layout

\begin_layout Standard
EtherCAT
\end_layout

\begin_layout Standard
Modbbus
\end_layout

\begin_layout Standard
zeroMQ
\end_layout

\begin_layout Standard
Internet of Things
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
The latproc system is to be split into a communications hub with scripting
 engines and communications modules all interconnected by a shared memory
 model and messaging system.
 In the first instance, Redis and Ã˜MQ provide the shared memory and messaging
 infrastructure.
 The shared repository provides access to shared static data, it may be
 implemented in a variety of database/memory systems but the key observation
 is that the repository is not expected to notify Clockwork instances of
 data changes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../../doc/communications_images/architecture1.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Clockwork messages and data sharing
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
On startup, a Clockwork driver
\end_layout

\begin_layout Itemize
interrogates a repository for 
\end_layout

\begin_deeper
\begin_layout Itemize
machine definitions 
\end_layout

\begin_layout Itemize
interface definitions
\end_layout

\end_deeper
\begin_layout Itemize
establishes connections as described in the interface definitions
\end_layout

\begin_layout Itemize
begins execution of the machines
\end_layout

\begin_layout Standard
Note that failure to establish communications does not cause an instance
 to fail its startup; it will continue to establish the connection until
 aborted by an external source.
 Communication interfaces can be interrogated within Clockwork and the channel
 state can be used to affect the execution of the models.
\end_layout

\begin_layout Subsection
Shared Memory and sampling
\end_layout

\begin_layout Standard
Clockwork if fundamentally a program that looks at changes in a memory map
 and uses those changes to affect changes in a state model of various simulated
 machines.
 It should be possible to share any memory block with clockwork, no matter
 the source.
 A block may represent a device or it may be divided into regions that relate
 to the device in some way, for example in with Beckhoff EtherCAT(tm) the
 `Module' refers to a physical device, in MODBUS, 
\emph on
coils
\emph default
 and 
\emph on
registers
\emph default
 refer to distinct memory regions.
\end_layout

\begin_layout Standard
Each block may have properties that descibe attributes common to all regions
 in the block 
\end_layout

\begin_layout LyX-Code
ModbusPanel BLOCK {
\end_layout

\begin_deeper
\begin_layout LyX-Code
X BIT[256] IN;
\end_layout

\begin_layout LyX-Code
Y BIT[256] OUT;
\end_layout

\begin_layout LyX-Code
V WORD[256] IN OUT;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
panel ModusPanel 
\end_layout

\begin_layout Standard
Given the above definition, Clockwork may bind fields of the block to a
 machine, for example:
\end_layout

\begin_layout LyX-Code
start_button panel X1;
\end_layout

\begin_layout Standard
defines 
\emph on
start_button
\emph default
 as a single bit object in clockwork, linked to coil X01 in the modbus memory
 block.
 
\end_layout

\begin_layout Section
Interprogram communication
\end_layout

\begin_layout Subsection
Interface Definitions
\end_layout

\begin_layout Standard
An interface between Clockwork drivers is introduced via the CHANNEL object
\end_layout

\begin_layout LyX-Code
channel_name CHANNEL(host:hostname, port:portname) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
MONITORS machine_name [ interface ], \SpecialChar \ldots{}
 ';'
\end_layout

\begin_layout LyX-Code
UPDATES machine_name [ interface ], \SpecialChar \ldots{}
 ;
\end_layout

\begin_layout LyX-Code
SENDS message_name, \SpecialChar \ldots{}
 ';'
\end_layout

\begin_layout LyX-Code
COMMANDS command_name, \SpecialChar \ldots{}
 ';'
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
For example a BIT has the interface:
\end_layout

\begin_layout LyX-Code
BIT MACHINE { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
on STATE; off INITIAL; 
\end_layout

\begin_layout LyX-Code
COMMAND toggle,turnOn,turnOff;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
A channel definition is directional, how the clauses apply to the machine
 depends on where the machines are instantiated.
 A channel may also include templates that define the machines that are
 monitored or updated via the channel.
 The definition may describe the states to be exchanged, a state that is
 the startup or default state and the properties that are to be exchanged
 on the interface.
\end_layout

\begin_layout LyX-Code
machine_class INTERFACE '{' 
\end_layout

\begin_deeper
\begin_layout LyX-Code
state1 STATE ';'
\end_layout

\begin_layout LyX-Code
state2 STATE ';'
\end_layout

\begin_layout LyX-Code
initial_state INITIAL ';'
\end_layout

\begin_layout LyX-Code
STATES '{' state3, state4, \SpecialChar \ldots{}
 '}'
\end_layout

\begin_layout LyX-Code
property1 PROPERTY [ READONLY | READWRITE ] ';'
\end_layout

\begin_layout LyX-Code
PROPERTIES '{' property2 [ READONLY | READWRITE ], \SpecialChar \ldots{}
 '}'
\end_layout

\end_deeper
\begin_layout LyX-Code
'}'
\end_layout

\begin_layout Standard
If an interface definition is provided and includes any state definitions,
 only the states defined will be exchanged.
 Similarly if properties are included in the definition, only changes to
 the named properties will be exchanged.
\end_layout

\begin_layout Standard
For example, in the following definition, only the states `on' and `off'
 of the switch are communicated to the connecting machine.
\end_layout

\begin_layout LyX-Code
switch INTERFACE { STATES { on, off } }
\end_layout

\begin_layout Standard
If the switch enters another state (eg., disabled, no message is sent to
 the listener and the switch is assumed to be still in the last state communicat
ed.
 (TBD)
\end_layout

\begin_layout Subsection
Issues
\end_layout

\begin_layout Enumerate
How do we manage the startup conditions? When a client connects? When the
 server restarts?
\end_layout

\begin_layout Enumerate
How large is a beckhoff master memory block?
\end_layout

\begin_layout Enumerate
How quickly can we send master block updates to a clockwork program.
 What latency can we expect?
\end_layout

\begin_layout Subsection
Message Format
\end_layout

\begin_layout Standard
Communication between all components is via a structured message using the
 JSON format.
\end_layout

\begin_layout LyX-Code
command string,
\end_layout

\begin_layout LyX-Code
need_response bool /* is this used/needed? TBD */
\end_layout

\begin_layout LyX-Code
parameters array [
\end_layout

\begin_deeper
\begin_layout LyX-Code
item {
\end_layout

\begin_deeper
\begin_layout LyX-Code
type B | BOOL | I | INTEGER | U | UNSIGNED | S | STRING | F | FLOAT | N
 | NAME
\end_layout

\begin_layout LyX-Code
value <depends on type>
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
Note that names conform to clockwork naming rules: ALPHA [ ALPHA NUMBER
 _ ] ...
\end_layout

\begin_layout Subsection
Dynamic configuration
\end_layout

\begin_layout Standard
A channel specification needs to be read by both ends of the channel.
 To facilitate the use of runtime sampling systems, a channel specification
 can be sent by the client when the connection is made.
 The channel specification may include interface specifications (TBD).
 
\end_layout

\begin_layout Subsection
Protocol
\end_layout

\begin_layout Standard
When a client connects to a server it is required to initiate a negotiation
 of the channel configuration for the connection.
 This can be done by a command message with the command: CHANNEL and the
 name of the channel.
 In this case, the server is expected to refer to its repository for a matching
 channel (and version\SpecialChar \ldots{}
).
 
\end_layout

\begin_layout Standard
If the server does not have a matching configuration, the client may send
 the configuration.
\end_layout

\begin_layout Standard
If a channel cannot be agreed, the connection will be terminated.
 
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
Weight sampling
\end_layout

\begin_layout Standard
Consider a weight sampling machine that is implemented with a remote (client)
 computer that communicates with the device and a master (server) computer
 that uses the sampled weight as part of its machine management.
 
\end_layout

\begin_layout Subsubsection
Shared configuration
\end_layout

\begin_layout Standard
We define a channel for communication between the computers and define an
 interface that outlines the interesting states and properties of the device
 interface.
 Both the client and server:
\end_layout

\begin_layout Quotation
ScalesChannel CHANNEL scales {
\end_layout

\begin_deeper
\begin_layout Quotation
MONITORS scales ScalesInterface;
\end_layout

\end_deeper
\begin_layout Quotation
}
\end_layout

\begin_layout Quotation
ScalesInterface INTERFACE {
\end_layout

\begin_deeper
\begin_layout Quotation
PROPERTIES weight, status;
\end_layout

\begin_layout Quotation
stable STATE;
\end_layout

\begin_layout Quotation
unstable INITIAL;
\end_layout

\end_deeper
\begin_layout Quotation
}
\end_layout

\begin_layout Subsubsection
Server configuration
\end_layout

\begin_layout Standard
Using this information, the master computer can define a machine that represents
 a remote scales machine conforming to the ScalesInterface and use this
 to implement some logic.
 The monitor uses the state of the remote system to determine whether the
 weight is valid but also demonstrates the use of a timer to `debounce'
 the remote state change:
\end_layout

\begin_layout LyX-Code
ScalesMachine ScalesInterface;
\end_layout

\begin_layout LyX-Code
WeightMonitor MACHINE scales {
\end_layout

\begin_deeper
\begin_layout LyX-Code
waiting WHEN scales IS unstable;
\end_layout

\begin_layout LyX-Code
stablising WHEN scales IS stable AND TIMER < 100;
\end_layout

\begin_layout LyX-Code
overweight WHEN scales IS stable AND scales.weight >= 100;
\end_layout

\begin_layout LyX-Code
ready WHEN scales IS stable AND scales.weight >= 10;
\end_layout

\begin_layout LyX-Code
underweight WHEN scales IS stable;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
remote_scales ScalesMachine;
\end_layout

\begin_layout LyX-Code
monitor WeightMonitor remote_scales;
\end_layout

\begin_layout Standard
The host machine executes the above without needing any additional implementatio
n details for the remote device but it needs to link the remote scales to
 the channel by instantiating the channel:
\end_layout

\begin_layout LyX-Code
scales_channel ScalesChannel(port:9999) remote_scales;
\end_layout

\begin_layout Subsubsection
Client configuration
\end_layout

\begin_layout Standard
The Clockwork driver that implements the scales defines a machine to interpret
 data from the hardware.
 Device connector will be used in this case to prepare the properties of
 this machine (not shown here).
\end_layout

\begin_layout LyX-Code
SCALES MACHINE {
\end_layout

\begin_deeper
\begin_layout LyX-Code
OPTION weight 0;
\end_layout

\begin_layout LyX-Code
OPTION status 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
unstable WHEN status == 
\begin_inset Quotes eld
\end_inset

U
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
stable WHEN status == 
\begin_inset Quotes eld
\end_inset

S
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
unknown DEFAULT;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
scales_machine SCALES;
\end_layout

\begin_layout LyX-Code
scales_channel ScalesChannel(host:
\begin_inset Quotes erd
\end_inset

master
\begin_inset Quotes erd
\end_inset

, port:9999) scales_machine;
\end_layout

\begin_layout Standard
When the client driver starts, it attempts to instantiate the scales channel
 by making a connection to the host and port provided.
 The scales channel enters a 'connected' state once communication is established.
 In the situation where both sides of the channel implement the scales the
 channel enters an 'error' state.
\end_layout

\begin_layout Subsection
System Monitoring
\end_layout

\begin_layout Standard
To setup a system monitor, a pattern can be used so that a range of machines
 can be selected without the need to name each machine.
 Consider an application that monitors a Clockwork instance to record state
 changes of a set of machines.
\end_layout

\begin_layout LyX-Code
MonitorChannel CHANNEL {
\end_layout

\begin_deeper
\begin_layout LyX-Code
MONITORS `*`;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Note that no parameters are passed to the channel and a wildcard is used
 to specify the machines to be monitored.
 The client instantiates the MonitorChannel and when the connection is establish
ed, the server transmits the current state and properties of all matching
 machines.
\end_layout

\begin_layout Standard
A wildcard can be associated with an interface, giving greater control of
 what is monitored:
\end_layout

\begin_layout LyX-Code
MonitorChannel CHANNEL {
\end_layout

\begin_deeper
\begin_layout LyX-Code
OPTION Initialisation FALSE;
\end_layout

\begin_layout LyX-Code
MONITORS `*` MonitorInterface;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
MonitorInterface INTERFACE {
\end_layout

\begin_deeper
\begin_layout LyX-Code
PROPERTIES `^[A-Z].*`;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
In the above example, the monitor interface specifies that only properties
 with names that begin wtih a capital letter will be sent.
 A similar specification can be used for transmitted states.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
At the client end, clockwork uses the channel object to establish and maintain
 a server connection.
 When the connection is setup, the current state of the machines in the
 'UPDATES' list are sent and the server is expected to also send the state
 of all the machines in the 'MONITORS' list.
 When a connection breaks, the client sets the state of all 'MONITORS' machines
 to their initial/default state.
\end_layout

\begin_layout Standard
At the server end, clockwork instantiates a machine for each entry in the
 'UPDATES' list and updates the state of this machine each time a message
 is received.
 This local instantiation shadows the state of the remote machine and can
 be used by other local machines as normal.
\end_layout

\begin_layout Subsection
Implementation notes
\end_layout

\begin_layout Itemize
A MachineInterface object now subclasses MachineInstance
\end_layout

\begin_layout Itemize
A MachineInterface is a representative or `proxy' for a MachineInstance
\end_layout

\begin_layout Itemize
MachineInterface objects are distinguished when setting up a channel and
 are not normally used as a source.
\end_layout

\begin_layout Itemize
MachineInterface objects can be used to propagate state to other instances
 of clockwork; this is done by registering a distance (hops) to the actual
 MachineInstance that they represent
\end_layout

\begin_layout Itemize
There are issues with setup and teardown of connections and how this effects
 messaging.
 TBD
\end_layout

\begin_layout Section
Predefined Channels
\end_layout

\begin_layout Subsection
EtherCAT
\end_layout

\begin_layout Standard
When the EtherCAT driver connects to Clockwork, it announces the modules
 that it has control over either by providing the names from the shared
 repository or by providing the definitions directly on the channel.
\end_layout

\begin_layout LyX-Code
Module BLOCK {
\end_layout

\begin_deeper
\begin_layout LyX-Code
OPTION position 0;
\end_layout

\begin_layout LyX-Code
OPTION alias 0;
\end_layout

\begin_layout LyX-Code
pdo1 REGION {
\end_layout

\begin_deeper
\begin_layout LyX-Code
OPTION SM 3;
\end_layout

\begin_layout LyX-Code
OPTION index 0x1a00;
\end_layout

\begin_layout LyX-Code
OPTION name 
\begin_inset Quotes eld
\end_inset

Inputs
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
BIT[8];
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Modbus
\end_layout

\begin_layout Subsection
Persistence
\end_layout

\begin_layout Section
Legacy Channels
\end_layout

\begin_layout Standard
This section is partial documentation of previous channel implementations
\end_layout

\begin_layout Subsection
Monitor channel
\end_layout

\begin_layout Standard
This is the main channel by which state changes are published, default port
 5557
\end_layout

\begin_layout Standard
message structure:
\end_layout

\begin_layout Standard
command := PROPERTY | STATE
\end_layout

\begin_layout Standard
need_response := FALSE
\end_layout

\begin_layout Standard
parameters := [ { N, <name> }, { <type>, <value> } ]
\end_layout

\begin_layout Subsection
Modbus channel
\end_layout

\begin_layout Standard
This channel is used to communicate with the modbus daemon, that daemon
 communicates to devices with the modbus protocol
\end_layout

\begin_layout Standard
message structure:
\end_layout

\begin_layout Standard
The following commands may be sent to the modbus daemon
\end_layout

\begin_layout Description
STARTUP tells modbus to load the configuration and obtain initial values
 for all coils etc
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

ON tells modbusd to emit debug information
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

OFF tells modbusd to stop emitting debug information
\end_layout

\begin_layout Description
UPDATE 
\end_layout

\begin_layout Subsection
Persistence channel
\end_layout

\begin_layout Standard
This is used to report changes of property values and state in persistent
 machines
\end_layout

\begin_layout Standard
Message structure
\end_layout

\begin_layout LyX-Code
command string,
\end_layout

\begin_layout LyX-Code
parameters array [
\end_layout

\begin_deeper
\begin_layout LyX-Code
item {
\end_layout

\begin_deeper
\begin_layout LyX-Code
type B | BOOL | I | INTEGER | U | UNSIGNED | S | STRING | F | FLOAT | N
 | NAME
\end_layout

\begin_layout LyX-Code
value <depends on type>
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout LyX-Code
]
\end_layout

\begin_layout Subsection
Device connector
\end_layout

\begin_layout Standard
There is two way communication with device connector sending property commands
 and receiving property or state commands or messages.
 
\end_layout

\begin_layout Description
Messages Device connector may simply read values and pass them to clockwork
 with no guarantee of delivery, these messages may be lost if something
 goes wrong at either end but for repetitively sampled data, this is not
 necessarirly a problem.
 
\end_layout

\begin_layout Description
Requests are sent from clockwork to device connector sometime to be handled
 by device connector and sometimes to pass through to the device.
 The requests are to be formated as the device requires them and a reply
 is to be sent to clockwork, either from the device or from device connector.
 Since device connector does not know anything about the device, the request
 provides additional information.
\end_layout

\begin_layout Description
Replies are sent from device connector to clockwork.
 If the request included a boolean option 
\begin_inset Quotes eld
\end_inset

ack_needed
\begin_inset Quotes erd
\end_inset

 (true), device connector simply sends 
\begin_inset Quotes eld
\end_inset

OK
\begin_inset Quotes erd
\end_inset

 when the request has been forwarded to the device.
 Otherwise, device connector forwards the request to the device and collects
 its response, using a pattern supplied in the request.
\end_layout

\begin_layout Description
Commands are sent from device connector to clockwork.
 Commands require an acknowledgment and sometimes require data.
 Device connector can be configured to supply data matching a pattern via
 the PROPERTY command or STATE command.
 Subexpressions in the pattern will become additional parameters.
\end_layout

\begin_layout Subsubsection
Messages
\end_layout

\begin_layout Standard
For data streaming, matched sub expressions are passed as parameters.
 ?? incomplete
\end_layout

\begin_layout Standard
Message structure:
\end_layout

\begin_layout LyX-Code
DATA string
\end_layout

\begin_layout LyX-Code
list_name name, 
\end_layout

\begin_layout LyX-Code
params array [ value, ...]
\end_layout

\begin_layout Subsubsection
Requests
\end_layout

\begin_layout LyX-Code
REQUEST string
\end_layout

\begin_layout LyX-Code
id integer
\end_layout

\begin_layout LyX-Code
params array [ value, ...
 ]
\end_layout

\begin_layout Subsubsection
Replies
\end_layout

\begin_layout Subsubsection
Commands
\end_layout

\begin_layout Section
Messaging system
\end_layout

\begin_layout Standard
The messaging system attempts to deal with various interprocess issues,
 using zmq for the heavy lifting but also providing application features:
\end_layout

\begin_layout Itemize
Clients negotiating a private communication channel
\end_layout

\begin_layout Itemize
Dealing with replies
\end_layout

\begin_layout Standard
All applications include the notion that some data is transitory and some
 is not, transitory data is sent without regard to whether anyone is listening,
 this is used for repeated messages such as sensor data streaming.
 For non-transitory data, a request/response method is used.
\end_layout

\begin_layout Section
Performance
\end_layout

\begin_layout Standard
This may need to be optimised, we could use a temlpate system; a property
 message looks as follows, where the user data is given in 
\backslash
$1, 
\backslash
$2 etc.
 Note that the value (
\backslash
$3) item needs to be converted into a JSON string with the appropriate escape
 charaters but apart from that the template can be filled fairly quickly.
\end_layout

\begin_layout LyX-Code
{ "command": "PROPERTY", "params": 
\end_layout

\begin_layout LyX-Code
[
\end_layout

\begin_layout LyX-Code
{ "type": "NAME", "value": $1 },
\end_layout

\begin_layout LyX-Code
{ "type": "NAME", "value": $2 },
\end_layout

\begin_layout LyX-Code
{ "type": TYPEOF($3), "value": $3 }
\end_layout

\begin_layout LyX-Code
] }
\end_layout

\end_body
\end_document
