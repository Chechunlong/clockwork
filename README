Copyright (C) 2012 Martin Leadbeater, Michael O'Connor

See the LICENCES file for license information.

Martin Leadbeater,  martin.leadbeater@gmail.com


PLEASE NOTE: 
	This software is a work in progress and is not yet
	likely to work on your equipment. 





   Latproc - Language and Tools for Process Control

Introduction

This software provides a high level, finite statemachine-based language 
called Clockwork that can be used to describe process control systems. 
Currently, this software only supports one hardware interface; the Beckhoff EtherCat
system (http://www.beckhoff.de/) through the IgH EtherCAT Master for Linux
(http://www.etherlab.org/en/ethercat/index.php)

Below are some instructions to help you build the program please
see the documentation for details about the language itself.

Instructions

   Note: this software requires that the following software be installed:

	* libmodbus (http://libmodbus.org/)  - for communication with modbus/tcp terminals

	* zeromq (http://www.zeromq.org/) - for inter-program messaging

	* boost (http://boost.org/) - various c++ bits and pieces


   Part A - Building Latproc tools for standalone experimentation

The instructions in this part build the Clockwork programming language interpreter
without the need for the IgH EtherCAT Master.

Note, the Makefile used here assumes libzmq is installed in /usr/local/


* pull the latproc project from git

  git clone git://github.com/latproc/iod.git latproc

* change to the latproc directory and build the interpreter

  cd latproc/iod
  make -f Makefile.cw
  


   Part B - Setting up the IgH EtherCAT software to be used but the Latproc software


The following instructions are brutally terse at present and we apologise
for that. Please watch this space for more precise instructions.

* pull the latproc project from git

  git clone git://github.com/latproc/iod.git latproc

* extract the etherlab kit from the EtherLab website:
    see http://www.etherlab.org/en/ethercat/index.php

  tar/hg/... etc

  Note: The following instructions assume your extract was placed into 
	etherlab-bundle-1.10/ethercat-1.5.1
  
* configure and build etherlabs ethercat component

  cd etherlab-bundle.../ethercat-...
  ./configure --enable-generic --enable-e1000e=no --enable-8139too=no
  make

  (your configure options may be different from ours)

* create a build directory for a local build of the etherlab bits we need.
  Once built, we link against the IgH EtherCAT Master tool files and these do not
  need to be rebuilt until you update the IgH software.

  mkdir tool
  cd tool

* create a makefile to build object files for the tool bits we need

  EL=../etherlab-bundle-1.10/ethercat-1.5.1 \
  CFLAGS="-I$EL/include -I$EL/master -I$EL/tool" ../createmake $EL/tool

* build the object files

  make
  
* change to the latproc directory and make a symbolic link that points 
to the ethercat master and tools from the etherlab kit

  cd latproc
  ln -s ../../etherlab-bundle-1.10/ethercat-1.5.1/ ethercat

* build the latproc tools

  cd iod
  make
  



